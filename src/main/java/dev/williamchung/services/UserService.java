package dev.williamchung.services;

import dev.williamchung.models.User;
import dev.williamchung.repositories.UserRepository;

/**
 * This is the UserService class which liaises between the servlet and repository dao.
 * Each method is explained below.
 */
public class UserService {
    private UserRepository userRepository = new UserRepository();
    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    /**
     * Grabs the User from Repo by a Username from the Servlet.
     * @param username
     * is passed by the Servlet
     * @return
     * returns a User object.
     */
    public User getUserByUsername(String username) {
        return this.userRepository.findByUsername(username);
    }

    /**
     * Grabs the User from Repo by an Id from the Servlet.
     * @param id
     * is passed by the Servlet.
     * @return
     * returns a User object.
     */
    public User getUserById(Integer id) {
        return this.userRepository.findById(id);
    }

    /**
     * Checks if a given Username and Password authenticates a valid user.
     * @param username
     * @param password
     * username and password are passed from the Servlet.
     * @return
     * returns a boolean true or false whether a User with given username was found and if the password matched.
     */
    public Boolean authenticateUser(String username, String password) {
        User user = this.userRepository.findByUsername(username);
        if (user == null) {
            return false;
        } else {
            return user.getPassword().equals(password);
        }
    }

    /**
     * Checks if an User with the given username already exists, for Registration purposes (Username must be unique).
     * @param username
     * from Servlet
     * @return
     * a boolean whether the unique username is available.
     */
    public Boolean usernameAvailable(String username) {
        User user = this.userRepository.findByUsername(username);
        return user == null;
    }

    /**
     * Registers a user by saving a new User object into the database.
     * @param username
     * @param password
     * is passed by the Servlet.
     * @return
     * returns a User object with the id generated by the database if successful.
     */
    public User registerUser(String username, String password) {
        User user = new User(username, password);
        return this.userRepository.save(user);
    }
}
